{"version":3,"sources":["Component.tsx"],"names":["Label","style","text","onTap","props","styleSheet","placeholderContainer","FloatingIcon","icon","containerStyle","StyleSheet","flatten","floatingIconContainer","e","nativeEvent","state","State","BEGAN","ErrorMessage","errorMessage","CharacterCounter","maxLength","characterCounterContainer","length","Input","React","forwardRef","ref","value","title","placeholder","numberOfLines","isPreview","editable","showCharacterCounter","inputRef","inputStyle","secureTextEntry","labelStyle","labelProps","showClearText","clearIconColor","clearIconProps","showSecureEye","secureEyeIconColor","secureEyeIconProps","errorMessageStyle","errorMessageProps","characterCounterStyle","characterCounterProps","onChange","onBlur","onClear","onFocus","internalInputRef","isFirstMount","contentSizeHeight","setContentSizeHeight","isMultiline","isClearIconVisible","undefined","secured","setSecured","isSecureEyeIconVisible","paddingRight","isCharacterCounterVisible","minHeight","Platform","OS","container","containerLabelTextInput","color","containerClearIconTextInput","current","textInput","textAlignVertical","paddingTop","paddingBottom","borderColor","event","blur","contentSize","height","display","justifyContent","marginTop","marginRight","IconType","Ionicons","oldSecured","containerErrorMessageCharacterCounter","create","backgroundColor","flexDirection","marginBottom","position","borderWidth","borderRadius","paddingLeft","top","right","bottom","zIndex","marginLeft"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useState } from \"react\";\nimport {\n  TextInput,\n  ColorValue,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextInputEndEditingEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n  Platform,\n} from \"react-native\";\nimport { TapGestureHandler, State } from \"react-native-gesture-handler\";\nimport { Text, TextProps } from \"../Text\";\nimport { Icon, IconProps, IconType } from \"../Icon\";\nimport { useFirstMountState } from \"../../../hooks/useFirstMountState\";\nimport type { ViewProps } from \"../View\";\n\nexport interface InputProps\n  extends Omit<TextInputProps, \"onChangeText\" | \"onChange\" | \"onBlur\" | \"multiline\" | \"style\"> {\n  title?: string | undefined;\n  style?: StyleProp<ViewStyle> | undefined;\n\n  onChange?: ((text: string) => void) | undefined;\n  onBlur?: ((e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void) | undefined;\n  errorMessage?: string | undefined;\n  isPreview?: boolean | undefined;\n  showCharacterCounter?: boolean | undefined;\n  maxLength?: number | undefined;\n  inputRef?: React.MutableRefObject<TextInput | null> | undefined;\n  inputStyle?: StyleProp<TextStyle> | undefined;\n\n  labelStyle?: StyleProp<TextStyle> | undefined;\n  labelProps?: Omit<TextProps, \"style\"> | undefined;\n\n  showClearText?: boolean | undefined;\n  clearIconColor?: ColorValue | undefined;\n  clearIconProps?: IconProps | undefined;\n\n  showSecureEye?: boolean | undefined;\n  secureEyeIconColor?: ColorValue | undefined;\n  secureEyeIconProps?: IconProps | undefined;\n\n  errorMessageStyle?: StyleProp<TextStyle> | undefined;\n  errorMessageProps?: Omit<TextProps, \"style\"> | undefined;\n\n  characterCounterStyle?: StyleProp<TextStyle> | undefined;\n  characterCounterProps?: Omit<TextProps, \"style\"> | undefined;\n\n  onClear?: (() => void) | undefined;\n}\n\nexport interface LabelProps extends TextProps {\n  text?: string | undefined;\n  onTap?: (() => void) | undefined;\n}\n\nexport interface FloatingIconProps extends ViewProps {\n  containerStyle?: StyleProp<ViewStyle>;\n  icon?: React.ReactElement;\n  onTap?: (() => void) | undefined;\n}\n\nexport interface ErrorMessageProps extends TextProps {\n  errorMessage?: string | undefined;\n}\n\nexport interface CharacterCounterProps extends TextProps {\n  text?: string | undefined;\n  maxLength?: number | undefined;\n}\n\nconst Label: React.FC<LabelProps> = ({ style, text, onTap, ...props }) => {\n  return (\n    <View style={styleSheet.placeholderContainer}>\n      <Text {...props} style={style}>\n        {text}\n      </Text>\n    </View>\n  );\n};\n\nconst FloatingIcon: React.FC<FloatingIconProps> = ({\n  icon,\n  style,\n  containerStyle,\n  onTap,\n  ...props\n}) => {\n  return (\n    <View style={StyleSheet.flatten([styleSheet.floatingIconContainer, containerStyle])}>\n      <TapGestureHandler\n        onHandlerStateChange={(e) => {\n          if (e.nativeEvent.state === State.BEGAN) {\n            onTap && onTap();\n          }\n        }}\n      >\n        <View {...props} style={style}>\n          {icon}\n        </View>\n      </TapGestureHandler>\n    </View>\n  );\n};\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ style, errorMessage, ...props }) => {\n  return (\n    <View>\n      <Text {...props} style={styleSheet.errorMessage}>\n        {errorMessage}\n      </Text>\n    </View>\n  );\n};\n\nconst CharacterCounter: React.FC<CharacterCounterProps> = ({\n  text = \"\",\n  maxLength = 0,\n  style,\n  ...props\n}) => {\n  return (\n    <View style={styleSheet.characterCounterContainer}>\n      <Text {...props} style={style}>\n        {text?.length} / {maxLength}\n      </Text>\n    </View>\n  );\n};\n\nconst Input = React.forwardRef<View, InputProps>(\n  (\n    {\n      value,\n      title,\n      errorMessage,\n      placeholder,\n      style,\n      numberOfLines = 1,\n      isPreview,\n      editable,\n      showCharacterCounter,\n      maxLength,\n      inputRef,\n      inputStyle,\n      secureTextEntry,\n\n      labelStyle,\n      labelProps,\n\n      showClearText,\n      clearIconColor,\n      clearIconProps,\n\n      showSecureEye,\n      secureEyeIconColor,\n      secureEyeIconProps,\n\n      errorMessageStyle,\n      errorMessageProps,\n\n      characterCounterStyle,\n      characterCounterProps,\n\n      onChange,\n      onBlur,\n      onClear,\n      onFocus,\n      ...props\n    },\n    ref\n  ) => {\n    const internalInputRef = useRef<TextInput>(null);\n    const isFirstMount = useFirstMountState();\n    const [contentSizeHeight, setContentSizeHeight] = useState(0);\n    const isMultiline = useMemo(() => {\n      if (secureTextEntry && numberOfLines! > 1) {\n        return false;\n      }\n      return numberOfLines! > 1;\n    }, [secureTextEntry, numberOfLines]);\n\n    const isClearIconVisible = useMemo(() => {\n      if (showClearText !== undefined) {\n        return showClearText;\n      }\n      return (value as string)?.length > 0;\n    }, [value, showClearText]);\n\n    const [secured, setSecured] = useState(secureTextEntry);\n    const isSecureEyeIconVisible = useMemo(() => {\n      if (showSecureEye !== undefined) {\n        return showSecureEye;\n      }\n      return secureTextEntry;\n    }, [secureTextEntry, showSecureEye]);\n\n    const paddingRight = useMemo(() => {\n      if (isClearIconVisible && isSecureEyeIconVisible) {\n        return 74;\n      }\n      if (isClearIconVisible || isSecureEyeIconVisible) {\n        return 44;\n      }\n      return undefined;\n    }, []);\n\n    const isCharacterCounterVisible = useMemo(() => {\n      if (showCharacterCounter) {\n        return showCharacterCounter;\n      }\n      if (maxLength !== undefined && maxLength > 0) {\n        return true;\n      }\n      return false;\n    }, [showCharacterCounter, maxLength]);\n\n    const minHeight = useMemo(() => {\n      if (Platform.OS === \"ios\" && isMultiline) {\n        return numberOfLines * contentSizeHeight + 28;\n      }\n      return undefined;\n    }, [contentSizeHeight, numberOfLines, isMultiline]);\n\n    return (\n      <View ref={ref} style={StyleSheet.flatten([styleSheet.container, style])}>\n        <View style={styleSheet.containerLabelTextInput}>\n          {title && (\n            <Label\n              {...labelProps}\n              style={StyleSheet.flatten([\n                labelStyle,\n                {\n                  color: !!errorMessage ? \"red\" : (labelStyle as TextStyle)?.color,\n                },\n              ])}\n              text={title}\n            />\n          )}\n          <View style={styleSheet.containerClearIconTextInput}>\n            <TextInput\n              {...props}\n              ref={(ref) => {\n                if (inputRef) {\n                  inputRef.current = ref;\n                }\n                internalInputRef.current = ref;\n              }}\n              editable={editable || !isPreview}\n              style={StyleSheet.flatten([\n                styleSheet.textInput,\n                { textAlignVertical: isMultiline ? \"top\" : \"center\" },\n                { paddingTop: 14, paddingBottom: 14 },\n                { minHeight },\n                {\n                  borderColor: !!errorMessage ? \"red\" : (inputStyle as ViewStyle)?.borderColor,\n                },\n                { paddingRight },\n                inputStyle,\n              ])}\n              value={value}\n              placeholder={placeholder}\n              maxLength={maxLength}\n              multiline={isMultiline}\n              numberOfLines={secureTextEntry ? undefined : numberOfLines}\n              secureTextEntry={secured}\n              underlineColorAndroid=\"transparent\"\n              onFocus={(event) => {\n                if (!isPreview) {\n                  onFocus && onFocus(event);\n                  return;\n                }\n                internalInputRef.current?.blur();\n              }}\n              onChangeText={onChange}\n              onEndEditing={(event) => {\n                onBlur && onBlur(event);\n              }}\n              onContentSizeChange={(e) => {\n                if (Platform.OS === \"ios\" && isFirstMount) {\n                  setContentSizeHeight(e.nativeEvent.contentSize.height);\n                }\n              }}\n            />\n            {isClearIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: isMultiline ? undefined : \"flex\",\n                  justifyContent: isMultiline ? undefined : \"center\",\n                }}\n                style={{\n                  marginTop: isMultiline ? 10 : undefined,\n                  marginRight: isSecureEyeIconVisible ? 40 : 10,\n                }}\n                icon={\n                  <Icon\n                    {...clearIconProps}\n                    type={IconType.Ionicons}\n                    name=\"close-circle\"\n                    color={!!errorMessage ? \"red\" : clearIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    onClear && onClear();\n                  }\n                }}\n              />\n            )}\n            {isSecureEyeIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n                style={{\n                  marginRight: 10,\n                }}\n                icon={\n                  <Icon\n                    {...secureEyeIconProps}\n                    type={IconType.Ionicons}\n                    name={secured ? \"eye\" : \"eye-off\"}\n                    color={!!errorMessage ? \"red\" : secureEyeIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    setSecured((oldSecured) => !oldSecured);\n                  }\n                }}\n              />\n            )}\n          </View>\n        </View>\n        {(errorMessage || isCharacterCounterVisible) && (\n          <View style={styleSheet.containerErrorMessageCharacterCounter}>\n            {errorMessage && (\n              <ErrorMessage\n                {...errorMessageProps}\n                style={errorMessageStyle}\n                errorMessage={errorMessage}\n              />\n            )}\n            {isCharacterCounterVisible && (\n              <CharacterCounter\n                {...characterCounterProps}\n                style={characterCounterStyle}\n                text={value}\n                maxLength={maxLength}\n              />\n            )}\n          </View>\n        )}\n      </View>\n    );\n  }\n);\n\nconst styleSheet = StyleSheet.create({\n  container: {\n    backgroundColor: \"transparent\",\n  },\n  containerLabelTextInput: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  placeholderContainer: {\n    marginBottom: 5,\n  },\n  containerClearIconTextInput: {\n    position: \"relative\",\n  },\n  containerErrorMessageCharacterCounter: {\n    marginTop: 3,\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: \"blue\",\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  floatingIconContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 2,\n  },\n  errorMessage: {\n    color: \"red\",\n  },\n  characterCounterContainer: {\n    marginLeft: \"auto\",\n  },\n});\n\nexport default Input;\n"]}