{"version":3,"sources":["Component.tsx"],"names":["Divider","React","forwardRef","ref","style","color","size","content","contentPosition","contentStyles","containerStyles","renderContent","defaultStyles","text","contentContainer","container","lineContainer","line","borderTopColor","borderTopWidth","contentWrapper","justifyContent","getContentPositionClass","StyleSheet","create","position","top","bottom","right","left","display","alignItems","flexDirection","paddingHorizontal","backgroundColor","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View as RNView, StyleSheet, StyleProp, ViewStyle } from \"react-native\";\nimport View from \"../View/Component\";\nimport Text from \"../Text/Component\";\n\nimport type { ViewProps } from \"react-native\";\n\nexport interface DividerProps extends ViewProps {\n  color?: string;\n  size?: number;\n  content?: string | (() => JSX.Element);\n  contentPosition?: \"left\" | \"center\" | \"right\";\n  contentStyles?: StyleProp<ViewStyle>;\n  containerStyles?: StyleProp<ViewStyle>;\n}\n\nconst Divider = React.forwardRef<RNView, DividerProps>(\n  (\n    { style, color, size = 1, content, contentPosition = \"center\", contentStyles, containerStyles },\n    ref\n  ) => {\n    const renderContent = () => {\n      if (!content) return null;\n\n      if (typeof content === \"string\")\n        return <Text style={[defaultStyles.text, contentStyles]}>{content}</Text>;\n\n      return <View style={[defaultStyles.contentContainer, containerStyles]}>{content()}</View>;\n    };\n\n    return (\n      <View ref={ref} style={[defaultStyles.container, style]}>\n        <View style={defaultStyles.lineContainer}>\n          <View style={[defaultStyles.line, { borderTopColor: color, borderTopWidth: size }]} />\n        </View>\n        <View\n          style={[\n            defaultStyles.contentWrapper,\n            { justifyContent: getContentPositionClass(contentPosition) },\n          ]}\n        >\n          {renderContent()}\n        </View>\n      </View>\n    );\n  }\n);\n\nconst defaultStyles = StyleSheet.create({\n  container: {\n    position: \"relative\",\n  },\n  lineContainer: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  contentWrapper: {\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  contentContainer: {\n    paddingHorizontal: 4,\n    backgroundColor: \"#FFFFFF\",\n  },\n  text: {\n    paddingHorizontal: 4,\n    backgroundColor: \"#FFFFFF\",\n    color: \"#bbb\",\n  },\n  line: {\n    width: \"100%\",\n    borderTopWidth: 1,\n    borderTopColor: \"#bbb\",\n  },\n});\n\nconst getContentPositionClass: (\n  postion: \"left\" | \"center\" | \"right\"\n) => \"flex-start\" | \"center\" | \"flex-end\" = (position) => {\n  if (position === \"left\") return \"flex-start\";\n  if (position === \"right\") return \"flex-end\";\n\n  return \"center\";\n};\n\nexport default Divider;\n"]}