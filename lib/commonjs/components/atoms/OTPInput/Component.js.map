{"version":3,"sources":["Component.tsx"],"names":["OTPInputType","OTPInput","React","forwardRef","ref","style","value","onBlur","pinCount","cellStyle","errorProps","errorStyle","onChange","keyboardType","errorMessage","cellTextStyle","focusCellStyle","focusCellTextStyle","autoFocus","otpInputType","isSecure","isPreview","renderSymbol","symbol","isFocused","textChild","renderOtpCell","index","wrapperStyle","styles","cellRoot","cellFocusStyle","focusCell","Box","boxCellRoot","boxCellFocus","undefined","cellText","StyleSheet","flatten","create","minWidth","width","height","justifyContent","alignItems","borderBottomColor","borderBottomWidth","borderColor","borderWidth","borderRadius","color","fontSize","textAlign"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { View as RNView, ViewStyle, StyleProp, TextStyle, StyleSheet } from \"react-native\";\nimport { CodeField, Cursor, CodeFieldProps } from \"react-native-confirmation-code-field\";\nimport type { PreviewProps, PropsWithRef } from \"../../../type\";\nimport Text from \"../Text/ThemedComponent\";\nimport View from \"../View/Component\";\n\nexport enum OTPInputType {\n  Box = \"box\",\n  Underline = \"underline\",\n}\n\nexport interface OTPInputProps\n  extends PreviewProps,\n    Omit<CodeFieldProps, \"renderCell\" | \"onChange\"> {\n  style?: StyleProp<ViewStyle>;\n  value?: string;\n  pinCount?: number;\n  autoFocus?: boolean;\n  cellStyle?: ViewStyle;\n  focusCellStyle?: ViewStyle;\n  cellTextStyle?: TextStyle;\n  focusCellTextStyle?: TextStyle;\n  otpInputType?: OTPInputType;\n  isSecure?: boolean;\n  onChange?: (code?: string) => void;\n  onCodeChanged?: (code?: string) => void;\n  onBlur?: (e: any) => void;\n  renderCell?: any;\n  errorMessage?: string;\n  errorProps?: any;\n  renderErrorMessage?: boolean;\n  errorStyle?: StyleProp<TextStyle>;\n}\n\nconst OTPInput = React.forwardRef<RNView, OTPInputProps>(\n  (\n    {\n      style,\n      value,\n      onBlur,\n      pinCount,\n      cellStyle,\n      errorProps,\n      errorStyle,\n      onChange,\n      keyboardType = \"number-pad\",\n      errorMessage,\n      cellTextStyle,\n      focusCellStyle,\n      focusCellTextStyle,\n      autoFocus,\n      otpInputType = \"box\",\n      isSecure = false,\n      isPreview,\n    },\n    ref\n  ) => {\n    const renderSymbol = useCallback(\n      (symbol, isFocused) => {\n        let textChild = null;\n        if (symbol) {\n          textChild = isSecure ? \"â€¢\" : symbol;\n        } else if (isFocused) {\n          textChild = <Cursor />;\n        }\n        return textChild;\n      },\n      [isSecure]\n    );\n\n    const renderOtpCell = useCallback(\n      (index, symbol, isFocused) => {\n        let wrapperStyle: ViewStyle = styles.cellRoot;\n        let cellFocusStyle: ViewStyle = styles.focusCell;\n\n        if (otpInputType === OTPInputType.Box) {\n          wrapperStyle = styles.boxCellRoot;\n          cellFocusStyle = styles.boxCellFocus;\n        }\n\n        return (\n          <View\n            key={index}\n            style={[\n              wrapperStyle,\n              cellStyle,\n              isFocused ? focusCellStyle || cellFocusStyle : undefined,\n            ]}\n          >\n            <Text style={[styles.cellText, cellTextStyle, isFocused && focusCellTextStyle]}>\n              {renderSymbol(symbol, isFocused)}\n            </Text>\n          </View>\n        );\n      },\n      [otpInputType, focusCellStyle, cellTextStyle, cellStyle]\n    );\n\n    return (\n      <View ref={ref} style={[styles.wrapperStyle, style]}>\n        <CodeField\n          editable={!isPreview}\n          autoFocus={autoFocus}\n          value={value}\n          onBlur={onBlur}\n          onChangeText={onChange}\n          cellCount={pinCount}\n          keyboardType={keyboardType}\n          renderCell={({ index, symbol, isFocused }) => renderOtpCell(index, symbol, isFocused)}\n        />\n        {!!errorMessage && (\n          <Text {...errorProps} style={StyleSheet.flatten([errorStyle && errorStyle])}>\n            {errorMessage}\n          </Text>\n        )}\n      </View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  wrapperStyle: {\n    minWidth: 250,\n  },\n  cellRoot: {\n    width: 60,\n    height: 60,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottomColor: \"#ccc\",\n    borderBottomWidth: 1,\n  },\n  boxCellRoot: {\n    width: 60,\n    height: 60,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n    borderRadius: 4,\n  },\n  cellText: {\n    color: \"#000\",\n    fontSize: 36,\n    textAlign: \"center\",\n  },\n  focusCell: {\n    borderBottomColor: \"#007AFF\",\n    borderBottomWidth: 2,\n  },\n  boxCellFocus: {\n    borderColor: \"#007AFF\",\n    borderWidth: 2,\n  },\n});\n\nexport default OTPInput;\n"]}