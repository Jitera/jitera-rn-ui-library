{"version":3,"sources":["Component.tsx"],"names":["Page","React","forwardRef","ref","style","children","statusBar","backgroundTop","backgroundColor","keyboardVerticalOffset","SafeAreaView","RNSafeAreaView","hideKeyboardHandled","hidden","statusColor","undefined","safeArea","insetBottom","insetTop","backgroundBottom","containerStyles","styles","container","innerComponent","Platform","OS","Keyboard","dismiss","topSafeArea","flex0","bottomSafeArea","WrapperComponent","wraperProps","View","KeyboardAvoidingView","select","ios","behavior","default","StyleSheet","create","keyboardAvoiding","flex","wrapper","overflow","displayName"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport {\n  View,\n  Platform,\n  Keyboard,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  StatusBar,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  KeyboardAvoidingViewProps,\n  ViewProps,\n  SafeAreaView as RNSafeAreaView,\n} from \"react-native\";\nimport type { SafeAreaViewProps } from \"react-native-safe-area-context\";\n\nexport interface PageProps extends ViewProps, KeyboardAvoidingViewProps {\n  children?: React.ReactNode;\n  SafeAreaView?: React.ElementType<SafeAreaViewProps>;\n  style?: StyleProp<ViewStyle>;\n  backgroundColor?: string;\n  statusBar?: \"light-content\" | \"dark-content\";\n  unsafe?: boolean;\n  hidden?: boolean;\n  statusColor?: string;\n  safeArea?: boolean;\n  keyboardVerticalOffset?: number;\n\n  /**\n   * Enable to custom background color of inset bottom on Iphone\n   * @default false\n   */\n  insetTop?: boolean;\n\n  /**\n   * Enable to custom background color of inset bottom on Iphone\n   * @default false\n   */\n  insetBottom?: boolean;\n\n  /**\n   * Color of inset top when customInsetBottom set to true\n   * @default #ffffff\n   */\n  backgroundTop?: string;\n\n  /**\n   * Color of inset bottom IPhone when customInsetBottom set to true\n   * @default #ffffff\n   */\n  backgroundBottom?: string;\n\n  /**\n   * Keyboard will hide when tap outside\n   * @default 0\n   */\n  hideKeyboardHandled?: boolean;\n}\n\nconst Page = React.forwardRef<View | KeyboardAvoidingView, PageProps>(\n  (\n    {\n      style,\n      children,\n      statusBar,\n      backgroundTop,\n      backgroundColor,\n      keyboardVerticalOffset = 0,\n      SafeAreaView = RNSafeAreaView,\n      hideKeyboardHandled = false,\n      hidden = false,\n      statusColor = undefined,\n      safeArea = false,\n      insetBottom = false,\n      insetTop = false,\n      backgroundBottom = undefined,\n    },\n    ref\n  ) => {\n    const containerStyles = useMemo(() => {\n      return [styles.container, { backgroundColor }, style]\n    }, [backgroundColor, style])\n    const innerComponent = useMemo(() => {\n      if (hideKeyboardHandled && Platform.OS !== \"web\") {\n        return (\n          <TouchableOpacity\n            activeOpacity={1}\n            accessible={false}\n            onPress={Keyboard.dismiss}\n            style={containerStyles}\n          >\n            {children}\n          </TouchableOpacity>\n        );\n      }\n      return <View style={containerStyles}>{children}</View>;\n    }, [containerStyles, children]);\n    const topSafeArea = useMemo(() => {\n      if (safeArea || insetTop) {\n        return (\n          <SafeAreaView\n            edges={[\"top\"]}\n            style={[styles.flex0, { backgroundColor: backgroundTop }]}\n          />\n        );\n      }\n      return undefined;\n    }, [insetTop, safeArea, backgroundTop]);\n    const bottomSafeArea = useMemo(() => {\n      if (safeArea || insetBottom) {\n        return (\n          <SafeAreaView\n            edges={[\"bottom\"]}\n            style={[styles.flex0, { backgroundColor: backgroundBottom || backgroundColor }]}\n          />\n        );\n      }\n      return undefined;\n    }, [insetBottom, safeArea, backgroundTop, backgroundColor]);\n\n    const { WrapperComponent, wraperProps } = useMemo(() => {\n      return {\n        WrapperComponent: Platform.OS === 'web' ?  View : KeyboardAvoidingView,\n        wraperProps: Platform.select({\n          ios: {\n            behavior: \"padding\" as KeyboardAvoidingViewProps['behavior'],\n          },\n          default: {},\n        }),\n      }\n    }, []);\n    return (\n      <WrapperComponent\n        ref={ref}\n        style={styles.container}\n        {...wraperProps}\n        keyboardVerticalOffset={keyboardVerticalOffset}\n      >\n        <StatusBar\n          hidden={hidden}\n          backgroundColor={statusColor}\n          barStyle={statusBar || \"dark-content\"}\n        />\n        {topSafeArea}\n        {innerComponent}\n        {bottomSafeArea}\n      </WrapperComponent>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  keyboardAvoiding: {\n    flex: 1,\n  },\n  flex0: { flex: 0 },\n  wrapper: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    overflow: \"hidden\",\n  },\n});\n\nPage.displayName = \"Page\";\n\nexport default Page;\n"]}