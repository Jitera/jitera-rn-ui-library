{"version":3,"sources":["index.tsx"],"names":["Screen","Dimensions","get","ScreenWidth","width","ScreenHeight","height","isIOS","Platform","OS","patchWebProps","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,MAAMA,MAAM,GAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAf;;AACA,MAAMC,WAAW,GAAGH,MAAM,CAACI,KAA3B;;AACA,MAAMC,YAAY,GAAGL,MAAM,CAACM,MAA5B;;AACA,MAAMC,KAAK,GAAGC,sBAASC,EAAT,KAAgB,KAA9B;;;AAMO,MAAMC,aAAa,GAAG,QAAgD;AAAA,MAAnB,EAAE,GAAGC;AAAL,GAAmB;AAC3E,SAAOA,IAAP;AACD,CAFM","sourcesContent":["import { Platform, Dimensions } from 'react-native';\nimport Color from '../../shared/color';\nimport renderNode from './renderNode';\nimport styleCache from './styleCache';\nimport normalizeText from './normalizeText';\nimport type { ThemeProps } from '../index';\n\nconst Screen = Dimensions.get('window');\nconst ScreenWidth = Screen.width;\nconst ScreenHeight = Screen.height;\nconst isIOS = Platform.OS === 'ios';\n\nexport type RneFunctionComponent<T> = React.FunctionComponent<\n  T & Partial<ThemeProps<T>>\n>;\n\nexport const patchWebProps = <T extends Record<any, any>>({ ...rest }: T) => {\n  return rest;\n};\n\nexport {\n  renderNode,\n  normalizeText,\n  ScreenWidth,\n  ScreenHeight,\n  styleCache,\n  isIOS,\n  Color,\n};\n"]}