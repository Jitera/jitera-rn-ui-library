{"version":3,"sources":["ThemeProvider.tsx"],"names":["ThemeContext","React","createContext","theme","colors","fontSizes","spacing","fonts","ThemeInner","Component","constructor","props","updates","setState","defaultTheme","state","defaultColors","useDark","darkColors","safeArea","insets","Boolean","getDerivedStateFromProps","isTheme","Object","keys","length","render","updateTheme","replaceTheme","children","Modal","Toast","CommonLoading","ThemeProvider","ThemeConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport spacing from './spacing';\nimport fontSizes from './fontSize';\nimport fonts from './fonts';\nimport {\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\nimport type { SafeAreaSize } from './safeAreaSize';\nimport colors from './colors';\nimport darkColors from './colorsDark';\nimport type { FullTheme, Theme } from './theme';\nimport type { RneFunctionComponent } from './helpers';\nimport CommonLoading from '../components/widgets/CommonLoading';\nimport Modal from '../components/widgets/Modal';\nimport Toast from '../components/widgets/Toast';\n\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\nexport interface ThemeProps<T> {\n  theme: Theme<T>;\n  updateTheme: (updates: RecursivePartial<FullTheme>) => void;\n  replaceTheme: (updates: RecursivePartial<FullTheme>) => void;\n}\n\nexport const ThemeContext: React.Context<ThemeProps<any>> = React.createContext(\n  {\n    theme: {\n      colors,\n      fontSizes,\n      spacing,\n      fonts,\n    },\n  } as ThemeProps<any>\n);\n\nexport type ThemeInnerProps = {\n  useDark?: boolean;\n  safeArea?: boolean;\n  insets?: SafeAreaSize;\n};\n\ntype ThemeInnerState = {\n  theme: Theme;\n  useDark: boolean;\n};\n\nclass ThemeInner extends React.Component<ThemeInnerProps, ThemeInnerState> {\n  static defaultProps = {\n    theme: {},\n    insets: {},\n    useDark: false,\n  };\n  defaultTheme: Partial<FullTheme>;\n  Wrapper?: any;\n\n  constructor(props: {\n    theme: Theme;\n    useDark?: boolean;\n    insets?: SafeAreaSize;\n  }) {\n    super(props);\n    const defaultColors = props.useDark ? darkColors : colors;\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n        fontSizes,\n        spacing,\n        fonts,\n        safeArea: props.insets,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: Boolean(props.useDark),\n    };\n  }\n\n  static getDerivedStateFromProps(\n    props: {\n      theme: Theme;\n      useDark?: boolean;\n    },\n    state: ThemeInnerState\n  ) {\n    const { useDark } = props;\n    const isTheme = (theme: Partial<FullTheme>) => {\n      return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n    };\n    //isTheme will check if the theme is provided by user and will update the theme only if its provided by user\n    //Not checking if the theme exist or not will always result in if statement getting executed as props.theme !== state.theme if theme is not provided\n    if (\n      useDark !== state.useDark ||\n      (isTheme(props.theme) && props.theme !== state.theme)\n    ) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(\n          state.theme,\n          deepmerge(\n            {\n              colors: defaultColors,\n            },\n            props.theme\n          )\n        ),\n        useDark,\n      };\n    }\n    return null;\n  }\n\n  updateTheme = (updates: RecursivePartial<FullTheme>) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme: RecursivePartial<FullTheme>) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    const { theme } = this.state;\n\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        <>\n          {this.props.children}\n          <Modal theme={theme} {...theme.Modal} />\n          <Toast theme={theme} {...theme.Toast} />\n          <CommonLoading theme={theme} {...theme.CommonLoading} />\n        </>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\ntype ThemeProviderProps = {\n  useDark?: boolean;\n  safeArea?: boolean;\n  children?: React.ReactNode;\n};\n\nconst ThemeProvider: RneFunctionComponent<ThemeProviderProps> = ({\n  safeArea,\n  ...props\n}) => {\n  if (safeArea) {\n    return (\n      <SafeAreaProvider>\n        <SafeAreaInsetsContext.Consumer>\n          {(insets: SafeAreaSize) => <ThemeInner insets={insets} {...props} />}\n        </SafeAreaInsetsContext.Consumer>\n      </SafeAreaProvider>\n    );\n  }\n  return <ThemeProvider {...props} />;\n};\n\nexport default ThemeProvider;\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]}