{"version":3,"sources":["withTheme.tsx"],"names":["isClassComponent","Component","Boolean","prototype","isReactComponent","ThemedComponent","WrappedComponent","themeKey","displayName","Object","assign","props","forwardedRef","children","rest","context","newProps","theme","DefaultTheme","updateTheme","replaceTheme","clone","withTheme","name","React","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,gBAAgB,GAAIC,SAAD,IACvBC,OAAO,CAACD,SAAS,CAACE,SAAV,IAAuBF,SAAS,CAACE,SAAV,CAAoBC,gBAA5C,CADT;;AAOA,MAAMC,eAAe,GAAG,CACtBC,gBADsB,EAEtBC,QAFsB,EAGtBC,WAHsB,KAInB;AACH,SAAOC,MAAM,CAACC,MAAP,CACL,CAACC,KAAD,EAAaC,YAAb,KAAmC;AACjC,UAAM;AAAEC,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAAwBH,KAA9B;AAEA,wBACE,6BAAC,4BAAD,QACII,OAAD,IAAa;AACZ;AACA,UAAI,CAACA,OAAL,EAAc;AACZ,cAAMC,QAAQ,GAAG,EAAE,GAAGF,IAAL;AAAWG,UAAAA,KAAK,EAAEC,cAAlB;AAAgCL,UAAAA;AAAhC,SAAjB;AACA,eAAOb,gBAAgB,CAACM,gBAAD,CAAhB,gBACL,6BAAC,gBAAD;AAAkB,UAAA,GAAG,EAAEM;AAAvB,WAAyCI,QAAzC,EADK,gBAGL,6BAAC,gBAAD,EAAsBA,QAAtB,CAHF;AAKD;;AACD,YAAM;AAAEC,QAAAA,KAAF;AAASE,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,UAAuCL,OAA7C;AACA,YAAMC,QAAQ,GAAG;AACfC,QAAAA,KADe;AAEfE,QAAAA,WAFe;AAGfC,QAAAA,YAHe;AAIf,WAAG,wBACAb,QAAQ,IACNU,KAAK,CACJV,QADI,CADR,IAIE,EALD,EAMDO,IANC,EAOD;AACEO,UAAAA,KAAK,EAAE;AADT,SAPC,CAJY;AAefR,QAAAA;AAfe,OAAjB;;AAiBA,UAAIb,gBAAgB,CAACM,gBAAD,CAApB,EAAwC;AACtC,4BAAO,6BAAC,gBAAD;AAAkB,UAAA,GAAG,EAAEM;AAAvB,WAAyCI,QAAzC,EAAP;AACD;;AACD,0BAAO,6BAAC,gBAAD,EAAsBA,QAAtB,CAAP;AACD,KAjCH,CADF;AAqCD,GAzCI,EA0CL;AAAER,IAAAA,WAAW,EAAEA;AAAf,GA1CK,CAAP;AA4CD,CAjDD;;AAmDA,SAASc,SAAT,CACEhB,gBADF,EAEEC,QAFF,EAKuC;AACrC,QAAMgB,IAAI,GAAGhB,QAAQ,GAChB,UAASA,QAAS,EADF,GAEhB,UACCD,gBAAgB,CAACE,WAAjB,IAAgCF,gBAAgB,CAACiB,IAAjD,IAAyD,WAC1D,EAJL;AAKA,QAAMtB,SAAS,GAAGI,eAAe,CAACC,gBAAD,EAAmBC,QAAnB,EAA6BgB,IAA7B,CAAjC;;AAEA,MAAIvB,gBAAgB,CAACM,gBAAD,CAApB,EAAwC;AACtC,WAAO,iDAAqBkB,eAAMC,UAAN,CAAiBxB,SAAjB,CAArB,EAAkDK,gBAAlD,CAAP;AACD;;AACD,SAAOL,SAAP;AACD;;eAEcqB,S","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ThemeConsumer, ThemeProps } from './ThemeProvider';\nimport DefaultTheme, { FullTheme } from './theme';\n\nconst isClassComponent = (Component: any) =>\n  Boolean(Component.prototype && Component.prototype.isReactComponent);\n\nexport interface ThemedComponent {\n  displayName: string;\n}\n\nconst ThemedComponent = (\n  WrappedComponent: any,\n  themeKey?: string,\n  displayName?: string\n) => {\n  return Object.assign(\n    (props: any, forwardedRef: any) => {\n      const { children, ...rest } = props;\n\n      return (\n        <ThemeConsumer>\n          {(context) => {\n            // If user isn't using ThemeProvider\n            if (!context) {\n              const newProps = { ...rest, theme: DefaultTheme, children };\n              return isClassComponent(WrappedComponent) ? (\n                <WrappedComponent ref={forwardedRef} {...newProps} />\n              ) : (\n                <WrappedComponent {...newProps} />\n              );\n            }\n            const { theme, updateTheme, replaceTheme } = context;\n            const newProps = {\n              theme,\n              updateTheme,\n              replaceTheme,\n              ...deepmerge<FullTheme>(\n                (themeKey &&\n                  (theme[\n                    themeKey as keyof Partial<FullTheme>\n                  ] as Partial<FullTheme>)) ||\n                  {},\n                rest,\n                {\n                  clone: false,\n                }\n              ),\n              children,\n            };\n            if (isClassComponent(WrappedComponent)) {\n              return <WrappedComponent ref={forwardedRef} {...newProps} />;\n            }\n            return <WrappedComponent {...newProps} />;\n          }}\n        </ThemeConsumer>\n      );\n    },\n    { displayName: displayName }\n  );\n};\n\nfunction withTheme<P = any, T = any>(\n  WrappedComponent: React.ForwardRefExoticComponent<P & Partial<ThemeProps<T>>> | React.FC<P & Partial<ThemeProps<T>>>,\n  themeKey: string\n):\n  | React.FunctionComponent<Omit<P, keyof ThemeProps<T>>>\n  | React.ForwardRefExoticComponent<P> {\n  const name = themeKey\n    ? `Themed.${themeKey}`\n    : `Themed.${\n        WrappedComponent.displayName || WrappedComponent.name || 'Component'\n      }`;\n  const Component = ThemedComponent(WrappedComponent, themeKey, name);\n\n  if (isClassComponent(WrappedComponent)) {\n    return hoistNonReactStatics(React.forwardRef(Component), WrappedComponent);\n  }\n  return Component;\n}\n\nexport default withTheme;\n"]}