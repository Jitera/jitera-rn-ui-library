{"version":3,"sources":["Component.tsx"],"names":["React","useMemo","View","Image","StyleSheet","Swiper","Carousel","forwardRef","ref","data","resizeMode","style","loop","props","images","map","url","uri","undefined","filter","image","flatten","styles","container","dotsTouchable","prevPos","nextPos","controlsProps","source","i","slideContainer","imageItem","create","height","flex","alignItems","justifyContent","width","displayName"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SACEC,IADF,EAEEC,KAFF,EAIEC,UAJF,QAOO,cAPP;AASA,OAAOC,MAAP,MAAoC,yBAApC;AAQA,MAAMC,QAAQ,gBAAGN,KAAK,CAACO,UAAN,CACf,OAEEC,GAFF,KAGK;AAAA,MAFH;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAU,GAAG,SAArB;AAAgCC,IAAAA,KAAK,GAAG,EAAxC;AAA4CC,IAAAA,IAAI,GAAG,IAAnD;AAAyD,OAAGC;AAA5D,GAEG;AAEH,QAAMC,MAAM,GAAGb,OAAO,CAAC,MAAM;AAC3B,WAAOQ,IAAI,CACRM,GADI,CACCC,GAAD,IAAS;AACZ,UAAIA,GAAJ,EAAS,OAAO;AAAEC,QAAAA,GAAG,EAAED;AAAP,OAAP;AACT,aAAOE,SAAP;AACD,KAJI,EAKJC,MALI,CAKIC,KAAD,IAAW,CAAC,CAACA,KALhB,CAAP;AAMD,GAPqB,EAOnB,CAACX,IAAD,CAPmB,CAAtB;AASA,sBACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAED,GAAX;AAAgB,IAAA,KAAK,EAAEJ,UAAU,CAACiB,OAAX,CAAmB,CAACC,MAAM,CAACC,SAAR,EAAmBZ,KAAnB,CAAnB;AAAvB,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAEC,IADR;AAEE,IAAA,aAAa,EAAE;AACbY,MAAAA,aAAa,EAAE,IADF;AAEbC,MAAAA,OAAO,EAAE,KAFI;AAGbC,MAAAA,OAAO,EAAE,KAHI;AAIb,UAAGb,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEc,aAAV;AAJa;AAFjB,KAQMd,KARN,GAUGC,MAAM,CAACC,GAAP,CAAW,CAACa,MAAD,EAASC,CAAT,kBACV,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACQ,cAApB;AAAoC,IAAA,GAAG,EAAED;AAAzC,kBACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAED,MADV;AAEE,IAAA,KAAK,EAAEN,MAAM,CAACS,SAFhB;AAGE,IAAA,UAAU,EAAErB;AAHd,IADF,CADD,CAVH,CADF,CADF;AAwBD,CAvCc,CAAjB;AA0CA,MAAMY,MAAM,GAAGlB,UAAU,CAAC4B,MAAX,CAAkB;AAC/BT,EAAAA,SAAS,EAAE;AACTU,IAAAA,MAAM,EAAE;AADC,GADoB;AAI/BH,EAAAA,cAAc,EAAE;AACdI,IAAAA,IAAI,EAAE,CADQ;AAEdC,IAAAA,UAAU,EAAE,QAFE;AAGdC,IAAAA,cAAc,EAAE;AAHF,GAJe;AAS/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,KAAK,EAAE,MADE;AAETJ,IAAAA,MAAM,EAAE;AAFC;AAToB,CAAlB,CAAf;AAeA3B,QAAQ,CAACgC,WAAT,GAAuB,UAAvB;AAEA,eAAehC,QAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  View,\n  Image,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  ImageResizeMode,\n} from 'react-native';\n\nimport Swiper, { SwiperProps } from 'react-native-web-swiper';\n\nexport interface CarouselProps extends SwiperProps {\n  data: string[];\n  resizeMode?: ImageResizeMode;\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Carousel = React.forwardRef<View, CarouselProps>(\n  (\n    { data, resizeMode = 'stretch', style = {}, loop = true, ...props },\n    ref\n  ) => {\n\n    const images = useMemo(() => {\n      return data\n        .map((url) => {\n          if (url) return { uri: url }\n          return undefined\n        })\n        .filter((image) => !!image)\n    }, [data])\n\n    return (\n      <View ref={ref} style={StyleSheet.flatten([styles.container, style])}>\n        <Swiper\n          loop={loop}\n          controlsProps={{\n            dotsTouchable: true,\n            prevPos: false,\n            nextPos: false,\n            ...props?.controlsProps,\n          }}\n          {...props}\n        >\n          {images.map((source, i) => (\n            <View style={styles.slideContainer} key={i}>\n              <Image\n                source={source}\n                style={styles.imageItem}\n                resizeMode={resizeMode}\n              />\n            </View>\n          ))}\n        </Swiper>\n      </View>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 200,\n  },\n  slideContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  imageItem: {\n    width: '100%',\n    height: '100%',\n  },\n});\n\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n"]}