{"version":3,"sources":["Component.tsx"],"names":["React","useMemo","useRef","useState","TextInput","StyleSheet","View","Platform","TapGestureHandler","State","Text","Icon","IconType","useFirstMountState","Label","style","text","onTap","props","styleSheet","placeholderContainer","FloatingIcon","icon","containerStyle","flatten","floatingIconContainer","e","nativeEvent","state","BEGAN","ErrorMessage","errorMessage","CharacterCounter","maxLength","characterCounterContainer","length","Input","forwardRef","ref","value","title","placeholder","numberOfLines","isPreview","editable","showCharacterCounter","inputRef","inputStyle","secureTextEntry","labelStyle","labelProps","showClearText","clearIconColor","clearIconProps","showSecureEye","secureEyeIconColor","secureEyeIconProps","errorMessageStyle","errorMessageProps","characterCounterStyle","characterCounterProps","onChange","onBlur","onClear","onFocus","internalInputRef","isFirstMount","contentSizeHeight","setContentSizeHeight","isMultiline","isClearIconVisible","undefined","secured","setSecured","isSecureEyeIconVisible","paddingRight","isCharacterCounterVisible","minHeight","OS","container","containerLabelTextInput","color","containerClearIconTextInput","current","textInput","textAlignVertical","paddingTop","paddingBottom","borderColor","event","blur","contentSize","height","display","justifyContent","marginTop","marginRight","Ionicons","oldSecured","containerErrorMessageCharacterCounter","create","backgroundColor","flexDirection","marginBottom","position","borderWidth","borderRadius","paddingLeft","top","right","bottom","zIndex","marginLeft"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useState } from \"react\";\nimport {\n  TextInput,\n  ColorValue,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextInputEndEditingEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n  Platform,\n} from \"react-native\";\nimport { TapGestureHandler, State } from \"react-native-gesture-handler\";\nimport { Text, TextProps } from \"../Text\";\nimport { Icon, IconProps, IconType } from \"../Icon\";\nimport { useFirstMountState } from \"../../../hooks/useFirstMountState\";\nimport type { ViewProps } from \"../View\";\n\nexport interface InputProps\n  extends Omit<TextInputProps, \"onChangeText\" | \"onChange\" | \"onBlur\" | \"multiline\" | \"style\"> {\n  title?: string | undefined;\n  style?: StyleProp<ViewStyle> | undefined;\n\n  onChange?: ((text: string) => void) | undefined;\n  onBlur?: ((e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void) | undefined;\n  errorMessage?: string | undefined;\n  isPreview?: boolean | undefined;\n  showCharacterCounter?: boolean | undefined;\n  maxLength?: number | undefined;\n  inputRef?: React.MutableRefObject<TextInput | null> | undefined;\n  inputStyle?: StyleProp<TextStyle> | undefined;\n\n  labelStyle?: StyleProp<TextStyle> | undefined;\n  labelProps?: Omit<TextProps, \"style\"> | undefined;\n\n  showClearText?: boolean | undefined;\n  clearIconColor?: ColorValue | undefined;\n  clearIconProps?: IconProps | undefined;\n\n  showSecureEye?: boolean | undefined;\n  secureEyeIconColor?: ColorValue | undefined;\n  secureEyeIconProps?: IconProps | undefined;\n\n  errorMessageStyle?: StyleProp<TextStyle> | undefined;\n  errorMessageProps?: Omit<TextProps, \"style\"> | undefined;\n\n  characterCounterStyle?: StyleProp<TextStyle> | undefined;\n  characterCounterProps?: Omit<TextProps, \"style\"> | undefined;\n\n  onClear?: (() => void) | undefined;\n}\n\nexport interface LabelProps extends TextProps {\n  text?: string | undefined;\n  onTap?: (() => void) | undefined;\n}\n\nexport interface FloatingIconProps extends ViewProps {\n  containerStyle?: StyleProp<ViewStyle>;\n  icon?: React.ReactElement;\n  onTap?: (() => void) | undefined;\n}\n\nexport interface ErrorMessageProps extends TextProps {\n  errorMessage?: string | undefined;\n}\n\nexport interface CharacterCounterProps extends TextProps {\n  text?: string | undefined;\n  maxLength?: number | undefined;\n}\n\nconst Label: React.FC<LabelProps> = ({ style, text, onTap, ...props }) => {\n  return (\n    <View style={styleSheet.placeholderContainer}>\n      <Text {...props} style={style}>\n        {text}\n      </Text>\n    </View>\n  );\n};\n\nconst FloatingIcon: React.FC<FloatingIconProps> = ({\n  icon,\n  style,\n  containerStyle,\n  onTap,\n  ...props\n}) => {\n  return (\n    <View style={StyleSheet.flatten([styleSheet.floatingIconContainer, containerStyle])}>\n      <TapGestureHandler\n        onHandlerStateChange={(e) => {\n          if (e.nativeEvent.state === State.BEGAN) {\n            onTap && onTap();\n          }\n        }}\n      >\n        <View {...props} style={style}>\n          {icon}\n        </View>\n      </TapGestureHandler>\n    </View>\n  );\n};\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ style, errorMessage, ...props }) => {\n  return (\n    <View>\n      <Text {...props} style={styleSheet.errorMessage}>\n        {errorMessage}\n      </Text>\n    </View>\n  );\n};\n\nconst CharacterCounter: React.FC<CharacterCounterProps> = ({\n  text = \"\",\n  maxLength = 0,\n  style,\n  ...props\n}) => {\n  return (\n    <View style={styleSheet.characterCounterContainer}>\n      <Text {...props} style={style}>\n        {text?.length} / {maxLength}\n      </Text>\n    </View>\n  );\n};\n\nconst Input = React.forwardRef<View, InputProps>(\n  (\n    {\n      value,\n      title,\n      errorMessage,\n      placeholder,\n      style,\n      numberOfLines = 1,\n      isPreview,\n      editable,\n      showCharacterCounter,\n      maxLength,\n      inputRef,\n      inputStyle,\n      secureTextEntry,\n\n      labelStyle,\n      labelProps,\n\n      showClearText,\n      clearIconColor,\n      clearIconProps,\n\n      showSecureEye,\n      secureEyeIconColor,\n      secureEyeIconProps,\n\n      errorMessageStyle,\n      errorMessageProps,\n\n      characterCounterStyle,\n      characterCounterProps,\n\n      onChange,\n      onBlur,\n      onClear,\n      onFocus,\n      ...props\n    },\n    ref\n  ) => {\n    const internalInputRef = useRef<TextInput>(null);\n    const isFirstMount = useFirstMountState();\n    const [contentSizeHeight, setContentSizeHeight] = useState(0);\n    const isMultiline = useMemo(() => {\n      if (secureTextEntry && numberOfLines! > 1) {\n        return false;\n      }\n      return numberOfLines! > 1;\n    }, [secureTextEntry, numberOfLines]);\n\n    const isClearIconVisible = useMemo(() => {\n      if (showClearText !== undefined) {\n        return showClearText;\n      }\n      return (value as string)?.length > 0;\n    }, [value, showClearText]);\n\n    const [secured, setSecured] = useState(secureTextEntry);\n    const isSecureEyeIconVisible = useMemo(() => {\n      if (showSecureEye !== undefined) {\n        return showSecureEye;\n      }\n      return secureTextEntry;\n    }, [secureTextEntry, showSecureEye]);\n\n    const paddingRight = useMemo(() => {\n      if (isClearIconVisible && isSecureEyeIconVisible) {\n        return 74;\n      }\n      if (isClearIconVisible || isSecureEyeIconVisible) {\n        return 44;\n      }\n      return undefined;\n    }, []);\n\n    const isCharacterCounterVisible = useMemo(() => {\n      if (showCharacterCounter) {\n        return showCharacterCounter;\n      }\n      if (maxLength !== undefined && maxLength > 0) {\n        return true;\n      }\n      return false;\n    }, [showCharacterCounter, maxLength]);\n\n    const minHeight = useMemo(() => {\n      if (Platform.OS === \"ios\" && isMultiline) {\n        return numberOfLines * contentSizeHeight + 28;\n      }\n      return undefined;\n    }, [contentSizeHeight, numberOfLines, isMultiline]);\n\n    return (\n      <View ref={ref} style={StyleSheet.flatten([styleSheet.container, style])}>\n        <View style={styleSheet.containerLabelTextInput}>\n          {title && (\n            <Label\n              {...labelProps}\n              style={StyleSheet.flatten([\n                labelStyle,\n                {\n                  color: !!errorMessage ? \"red\" : (labelStyle as TextStyle)?.color,\n                },\n              ])}\n              text={title}\n            />\n          )}\n          <View style={styleSheet.containerClearIconTextInput}>\n            <TextInput\n              {...props}\n              ref={(ref) => {\n                if (inputRef) {\n                  inputRef.current = ref;\n                }\n                internalInputRef.current = ref;\n              }}\n              editable={editable || !isPreview}\n              style={StyleSheet.flatten([\n                styleSheet.textInput,\n                { textAlignVertical: isMultiline ? \"top\" : \"center\" },\n                { paddingTop: 14, paddingBottom: 14 },\n                { minHeight },\n                {\n                  borderColor: !!errorMessage ? \"red\" : (inputStyle as ViewStyle)?.borderColor,\n                },\n                { paddingRight },\n                inputStyle,\n              ])}\n              value={value}\n              placeholder={placeholder}\n              maxLength={maxLength}\n              multiline={isMultiline}\n              numberOfLines={secureTextEntry ? undefined : numberOfLines}\n              secureTextEntry={secured}\n              underlineColorAndroid=\"transparent\"\n              onFocus={(event) => {\n                if (!isPreview) {\n                  onFocus && onFocus(event);\n                  return;\n                }\n                internalInputRef.current?.blur();\n              }}\n              onChangeText={onChange}\n              onEndEditing={(event) => {\n                onBlur && onBlur(event);\n              }}\n              onContentSizeChange={(e) => {\n                if (Platform.OS === \"ios\" && isFirstMount) {\n                  setContentSizeHeight(e.nativeEvent.contentSize.height);\n                }\n              }}\n            />\n            {isClearIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: isMultiline ? undefined : \"flex\",\n                  justifyContent: isMultiline ? undefined : \"center\",\n                }}\n                style={{\n                  marginTop: isMultiline ? 10 : undefined,\n                  marginRight: isSecureEyeIconVisible ? 40 : 10,\n                }}\n                icon={\n                  <Icon\n                    {...clearIconProps}\n                    type={IconType.Ionicons}\n                    name=\"close-circle\"\n                    color={!!errorMessage ? \"red\" : clearIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    onClear && onClear();\n                  }\n                }}\n              />\n            )}\n            {isSecureEyeIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n                style={{\n                  marginRight: 10,\n                }}\n                icon={\n                  <Icon\n                    {...secureEyeIconProps}\n                    type={IconType.Ionicons}\n                    name={secured ? \"eye\" : \"eye-off\"}\n                    color={!!errorMessage ? \"red\" : secureEyeIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    setSecured((oldSecured) => !oldSecured);\n                  }\n                }}\n              />\n            )}\n          </View>\n        </View>\n        {(errorMessage || isCharacterCounterVisible) && (\n          <View style={styleSheet.containerErrorMessageCharacterCounter}>\n            {errorMessage && (\n              <ErrorMessage\n                {...errorMessageProps}\n                style={errorMessageStyle}\n                errorMessage={errorMessage}\n              />\n            )}\n            {isCharacterCounterVisible && (\n              <CharacterCounter\n                {...characterCounterProps}\n                style={characterCounterStyle}\n                text={value}\n                maxLength={maxLength}\n              />\n            )}\n          </View>\n        )}\n      </View>\n    );\n  }\n);\n\nconst styleSheet = StyleSheet.create({\n  container: {\n    backgroundColor: \"transparent\",\n  },\n  containerLabelTextInput: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  placeholderContainer: {\n    marginBottom: 5,\n  },\n  containerClearIconTextInput: {\n    position: \"relative\",\n  },\n  containerErrorMessageCharacterCounter: {\n    marginTop: 3,\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: \"blue\",\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  floatingIconContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 2,\n  },\n  errorMessage: {\n    color: \"red\",\n  },\n  characterCounterContainer: {\n    marginLeft: \"auto\",\n  },\n});\n\nexport default Input;\n"]}