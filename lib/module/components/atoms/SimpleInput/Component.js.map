{"version":3,"sources":["Component.tsx"],"names":["React","useMemo","useRef","useState","TextInput","StyleSheet","View","Platform","TapGestureHandler","State","Icon","IconType","useFirstMountState","FloatingIcon","icon","style","containerStyle","onTap","props","flatten","styleSheet","floatingIconContainer","e","nativeEvent","state","BEGAN","SimpleInput","forwardRef","ref","value","placeholder","numberOfLines","isPreview","editable","maxLength","inputRef","inputStyle","secureTextEntry","showClearText","clearIconColor","clearIconProps","showSecureEye","secureEyeIconColor","secureEyeIconProps","onChange","onBlur","onClear","onFocus","internalInputRef","isFirstMount","contentSizeHeight","setContentSizeHeight","isMultiline","isClearIconVisible","undefined","length","secured","setSecured","isSecureEyeIconVisible","paddingRight","minHeight","OS","container","containerTextInput","containerClearIconTextInput","current","textInput","textAlignVertical","paddingTop","paddingBottom","borderColor","event","blur","contentSize","height","display","justifyContent","marginTop","marginRight","Ionicons","oldSecured","create","backgroundColor","flexDirection","placeholderContainer","marginBottom","position","borderWidth","borderRadius","paddingLeft","top","right","bottom","zIndex"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useState } from 'react';\nimport {\n  TextInput,\n  ColorValue,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextInputEndEditingEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport { TapGestureHandler, State } from 'react-native-gesture-handler';\nimport { Icon, IconProps, IconType } from '../Icon';\nimport { useFirstMountState } from '../../../hooks/useFirstMountState';\nimport type { ViewProps } from '../View';\n\nexport interface SimpleInputProps\n  extends Omit<\n    TextInputProps,\n    'onChangeText' | 'onChange' | 'onBlur' | 'multiline' | 'style'\n  > {\n  style?: StyleProp<ViewStyle> | undefined;\n\n  onChange?: ((text: string) => void) | undefined;\n  onBlur?:\n    | ((e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void)\n    | undefined;\n  isPreview?: boolean | undefined;\n  maxLength?: number | undefined;\n  inputRef?: React.MutableRefObject<TextInput | null> | undefined;\n  inputStyle?: StyleProp<TextStyle> | undefined;\n\n  showClearText?: boolean | undefined;\n  clearIconColor?: ColorValue | undefined;\n  clearIconProps?: IconProps | undefined;\n\n  showSecureEye?: boolean | undefined;\n  secureEyeIconColor?: ColorValue | undefined;\n  secureEyeIconProps?: IconProps | undefined;\n\n  onClear?: (() => void) | undefined;\n}\n\nexport interface FloatingIconProps extends ViewProps {\n  containerStyle?: StyleProp<ViewStyle>;\n  icon?: React.ReactElement;\n  onTap?: (() => void) | undefined;\n}\n\nconst FloatingIcon: React.FC<FloatingIconProps> = ({\n  icon,\n  style,\n  containerStyle,\n  onTap,\n  ...props\n}) => {\n  return (\n    <View\n      style={StyleSheet.flatten([\n        styleSheet.floatingIconContainer,\n        containerStyle,\n      ])}\n    >\n      <TapGestureHandler\n        onHandlerStateChange={(e) => {\n          if (e.nativeEvent.state === State.BEGAN) {\n            onTap && onTap();\n          }\n        }}\n      >\n        <View {...props} style={style}>\n          {icon}\n        </View>\n      </TapGestureHandler>\n    </View>\n  );\n};\n\nconst SimpleInput = React.forwardRef<View, SimpleInputProps>(\n  (\n    {\n      value,\n      placeholder,\n      style,\n      numberOfLines = 1,\n      isPreview,\n      editable,\n      maxLength,\n      inputRef,\n      inputStyle,\n      secureTextEntry,\n\n      showClearText,\n      clearIconColor,\n      clearIconProps,\n\n      showSecureEye,\n      secureEyeIconColor,\n      secureEyeIconProps,\n\n      onChange,\n      onBlur,\n      onClear,\n      onFocus,\n      ...props\n    },\n    ref\n  ) => {\n    const internalInputRef = useRef<TextInput>(null);\n    const isFirstMount = useFirstMountState();\n    const [contentSizeHeight, setContentSizeHeight] = useState(0);\n    const isMultiline = useMemo(() => {\n      if (secureTextEntry && numberOfLines! > 1) {\n        return false;\n      }\n      return numberOfLines! > 1;\n    }, [secureTextEntry, numberOfLines]);\n\n    const isClearIconVisible = useMemo(() => {\n      if (showClearText !== undefined) {\n        return showClearText;\n      }\n      return (value as string)?.length > 0;\n    }, [value, showClearText]);\n\n    const [secured, setSecured] = useState(secureTextEntry);\n    const isSecureEyeIconVisible = useMemo(() => {\n      if (showSecureEye !== undefined) {\n        return showSecureEye;\n      }\n      return secureTextEntry;\n    }, [secureTextEntry, showSecureEye]);\n\n    const paddingRight = useMemo(() => {\n      if (isClearIconVisible && isSecureEyeIconVisible) {\n        return 74;\n      }\n      if (isClearIconVisible || isSecureEyeIconVisible) {\n        return 44;\n      }\n      return undefined;\n    }, []);\n\n    const minHeight = useMemo(() => {\n      if (Platform.OS === 'ios' && isMultiline) {\n        return numberOfLines * contentSizeHeight + 28;\n      }\n      return undefined;\n    }, [contentSizeHeight, numberOfLines, isMultiline]);\n\n    return (\n      <View ref={ref} style={StyleSheet.flatten([styleSheet.container, style])}>\n        <View style={styleSheet.containerTextInput}>\n          <View style={styleSheet.containerClearIconTextInput}>\n            <TextInput\n              {...props}\n              ref={(ref) => {\n                if (inputRef) {\n                  inputRef.current = ref;\n                }\n                internalInputRef.current = ref;\n              }}\n              editable={editable || !isPreview}\n              style={StyleSheet.flatten([\n                styleSheet.textInput,\n                { textAlignVertical: isMultiline ? 'top' : 'center' },\n                { paddingTop: 14, paddingBottom: 14 },\n                { minHeight },\n                {\n                  borderColor: (inputStyle as ViewStyle)?.borderColor,\n                },\n                { paddingRight },\n                inputStyle,\n              ])}\n              value={value}\n              placeholder={placeholder}\n              maxLength={maxLength}\n              multiline={isMultiline}\n              numberOfLines={secureTextEntry ? undefined : numberOfLines}\n              secureTextEntry={secured}\n              underlineColorAndroid=\"transparent\"\n              onFocus={(event) => {\n                if (!isPreview) {\n                  onFocus && onFocus(event);\n                  return;\n                }\n                internalInputRef.current?.blur();\n              }}\n              onChangeText={onChange}\n              onEndEditing={(event) => {\n                onBlur && onBlur(event);\n              }}\n              onContentSizeChange={(e) => {\n                if (Platform.OS === 'ios' && isFirstMount) {\n                  setContentSizeHeight(e.nativeEvent.contentSize.height);\n                }\n              }}\n            />\n            {isClearIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: isMultiline ? undefined : 'flex',\n                  justifyContent: isMultiline ? undefined : 'center',\n                }}\n                style={{\n                  marginTop: isMultiline ? 10 : undefined,\n                  marginRight: isSecureEyeIconVisible ? 40 : 10,\n                }}\n                icon={\n                  <Icon\n                    {...clearIconProps}\n                    type={IconType.Ionicons}\n                    name=\"close-circle\"\n                    color={clearIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    onClear && onClear();\n                  }\n                }}\n              />\n            )}\n            {isSecureEyeIconVisible && (\n              <FloatingIcon\n                containerStyle={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                }}\n                style={{\n                  marginRight: 10,\n                }}\n                icon={\n                  <Icon\n                    {...secureEyeIconProps}\n                    type={IconType.Ionicons}\n                    name={secured ? 'eye' : 'eye-off'}\n                    color={secureEyeIconColor}\n                  />\n                }\n                onTap={() => {\n                  if (!isPreview) {\n                    setSecured((oldSecured) => !oldSecured);\n                  }\n                }}\n              />\n            )}\n          </View>\n        </View>\n      </View>\n    );\n  }\n);\n\nconst styleSheet = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n  },\n  containerTextInput: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  placeholderContainer: {\n    marginBottom: 5,\n  },\n  containerClearIconTextInput: {\n    position: 'relative',\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderColor: 'blue',\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  floatingIconContainer: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 2,\n  },\n});\n\nexport default SimpleInput;\n"]}