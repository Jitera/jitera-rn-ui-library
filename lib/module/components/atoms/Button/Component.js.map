{"version":3,"sources":["Component.tsx"],"names":["React","Text","StyleSheet","ActivityIndicator","TouchableOpacity","Color","Button","forwardRef","ref","style","title","titleStyle","titleStyleProps","disabled","loading","onPress","children","containerStyle","flatten","styles","container","opacity","backgroundColor","alpha","toString","handlePress","event","create","height","justifyContent","alignItems","fontSize","position","displayName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,IADF,EAEEC,UAFF,EAGEC,iBAHF,EAMEC,gBANF,QAQO,cARP;AASA,SAASC,KAAT,QAAsB,wBAAtB;AAQA,MAAMC,MAAM,gBAAGN,KAAK,CAACO,UAAN,CACb,OAAsFC,GAAtF,KAA8F;AAAA,MAA7F;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,UAAU,EAAEC,eAA5B;AAA6CC,IAAAA,QAA7C;AAAuDC,IAAAA,OAAvD;AAAgEC,IAAAA,OAAhE;AAAyEC,IAAAA;AAAzE,GAA6F;AAC5F,QAAMC,cAAc,GAAGf,UAAU,CAACgB,OAAX,CAAmB,CAACC,MAAM,CAACC,SAAR,EAAmBX,KAAnB,CAAnB,CAAvB;AACA,QAAME,UAAU,GAAGT,UAAU,CAACgB,OAAX,CAAmB,CACpCC,MAAM,CAACT,KAD6B,EAEpCE,eAFoC,EAGpC,CAACC,QAAQ,IAAIC,OAAb,KAAyB;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAHW,CAAnB,CAAnB;AAMA,MAAIC,eAAe,GAAGL,cAAc,CAACK,eAArC;;AAEA,MAAI,CAACT,QAAQ,IAAIC,OAAb,KAAyBQ,eAA7B,EAA8C;AAC5CA,IAAAA,eAAe,GAAGjB,KAAK,CAACiB,eAAD,CAAL,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkCC,QAAlC,EAAlB;AACD;;AAEDP,EAAAA,cAAc,CAACK,eAAf,GAAiCA,eAAjC;;AAEA,QAAMG,WAAW,GAAIC,KAAD,IAAkC;AACpD,QAAIZ,OAAO,IAAID,QAAf,EAAyB;;AAEzB,QAAIE,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACW,KAAD,CAAP;AACD;AACF,GAND;;AAQA,sBACE,oBAAC,gBAAD;AAAkB,IAAA,GAAG,EAAElB,GAAvB;AAA4B,IAAA,KAAK,EAAES,cAAnC;AAAmD,IAAA,OAAO,EAAEQ;AAA5D,kBACE,0CACGX,OAAO,iBAAI,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEK,MAAM,CAACL,OAAjC;AAA0C,IAAA,IAAI,EAAC;AAA/C,IADd,EAEGJ,KAAK,iBAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC;AAAb,KAA0BD,KAA1B,CAFZ,EAGGM,QAHH,CADF,CADF;AASD,CAlCY,CAAf;AAqCA,MAAMG,MAAM,GAAGjB,UAAU,CAACyB,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,MAAM,EAAE,EADC;AAETN,IAAAA,eAAe,EAAE,SAFR;AAGTO,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,UAAU,EAAE;AAJH,GADoB;AAO/BpB,EAAAA,KAAK,EAAE;AACLqB,IAAAA,QAAQ,EAAE;AADL,GAPwB;AAU/BjB,EAAAA,OAAO,EAAE;AACPkB,IAAAA,QAAQ,EAAE;AADH;AAVsB,CAAlB,CAAf;AAeA1B,MAAM,CAAC2B,WAAP,GAAqB,QAArB;AAEA,eAAe3B,MAAf","sourcesContent":["import React from \"react\";\nimport type { TouchableOpacityProps } from \"react-native\";\nimport {\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  StyleProp,\n  TextStyle,\n  TouchableOpacity,\n  GestureResponderEvent,\n} from \"react-native\";\nimport { Color } from \"../../../theme/helpers\";\n\nexport interface ButtonProps extends TouchableOpacityProps {\n  title?: string;\n  titleStyle?: StyleProp<TextStyle>;\n  loading?: boolean;\n}\n\nconst Button = React.forwardRef<TouchableOpacity, ButtonProps>(\n  ({ style, title, titleStyle: titleStyleProps, disabled, loading, onPress, children }, ref) => {\n    const containerStyle = StyleSheet.flatten([styles.container, style]);\n    const titleStyle = StyleSheet.flatten([\n      styles.title,\n      titleStyleProps,\n      (disabled || loading) && { opacity: 0.1 },\n    ]);\n\n    let backgroundColor = containerStyle.backgroundColor as string;\n\n    if ((disabled || loading) && backgroundColor) {\n      backgroundColor = Color(backgroundColor).alpha(0.2).toString();\n    }\n\n    containerStyle.backgroundColor = backgroundColor;\n\n    const handlePress = (event: GestureResponderEvent) => {\n      if (loading || disabled) return;\n\n      if (onPress) {\n        onPress(event);\n      }\n    };\n\n    return (\n      <TouchableOpacity ref={ref} style={containerStyle} onPress={handlePress}>\n        <>\n          {loading && <ActivityIndicator style={styles.loading} size=\"small\" />}\n          {title && <Text style={titleStyle}>{title}</Text>}\n          {children}\n        </>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 50,\n    backgroundColor: \"#40a9ff\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  title: {\n    fontSize: 20,\n  },\n  loading: {\n    position: \"absolute\",\n  },\n});\n\nButton.displayName = \"Button\";\n\nexport default Button;\n"]}