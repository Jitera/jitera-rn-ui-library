{"version":3,"sources":["ThemeProvider.tsx"],"names":["React","deepmerge","spacing","fontSizes","fonts","SafeAreaProvider","SafeAreaInsetsContext","colors","darkColors","CommonLoading","Modal","Toast","ThemeContext","createContext","theme","ThemeInner","Component","constructor","props","updates","setState","defaultTheme","state","defaultColors","useDark","safeArea","insets","Boolean","getDerivedStateFromProps","isTheme","Object","keys","length","render","updateTheme","replaceTheme","children","ThemeProvider","ThemeConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport spacing from './spacing';\nimport fontSizes from './fontSize';\nimport fonts from './fonts';\nimport {\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\nimport type { SafeAreaSize } from './safeAreaSize';\nimport colors from './colors';\nimport darkColors from './colorsDark';\nimport type { FullTheme, Theme } from './theme';\nimport type { RneFunctionComponent } from './helpers';\nimport CommonLoading from '../components/widgets/CommonLoading';\nimport Modal from '../components/widgets/Modal';\nimport Toast from '../components/widgets/Toast';\n\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\nexport interface ThemeProps<T> {\n  theme: Theme<T>;\n  updateTheme: (updates: RecursivePartial<FullTheme>) => void;\n  replaceTheme: (updates: RecursivePartial<FullTheme>) => void;\n}\n\nexport const ThemeContext: React.Context<ThemeProps<any>> = React.createContext(\n  {\n    theme: {\n      colors,\n      fontSizes,\n      spacing,\n      fonts,\n    },\n  } as ThemeProps<any>\n);\n\nexport type ThemeInnerProps = {\n  useDark?: boolean;\n  safeArea?: boolean;\n  insets?: SafeAreaSize;\n};\n\ntype ThemeInnerState = {\n  theme: Theme;\n  useDark: boolean;\n};\n\nclass ThemeInner extends React.Component<ThemeInnerProps, ThemeInnerState> {\n  static defaultProps = {\n    theme: {},\n    insets: {},\n    useDark: false,\n  };\n  defaultTheme: Partial<FullTheme>;\n  Wrapper?: any;\n\n  constructor(props: {\n    theme: Theme;\n    useDark?: boolean;\n    insets?: SafeAreaSize;\n  }) {\n    super(props);\n    const defaultColors = props.useDark ? darkColors : colors;\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n        fontSizes,\n        spacing,\n        fonts,\n        safeArea: props.insets,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: Boolean(props.useDark),\n    };\n  }\n\n  static getDerivedStateFromProps(\n    props: {\n      theme: Theme;\n      useDark?: boolean;\n    },\n    state: ThemeInnerState\n  ) {\n    const { useDark } = props;\n    const isTheme = (theme: Partial<FullTheme>) => {\n      return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n    };\n    //isTheme will check if the theme is provided by user and will update the theme only if its provided by user\n    //Not checking if the theme exist or not will always result in if statement getting executed as props.theme !== state.theme if theme is not provided\n    if (\n      useDark !== state.useDark ||\n      (isTheme(props.theme) && props.theme !== state.theme)\n    ) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(\n          state.theme,\n          deepmerge(\n            {\n              colors: defaultColors,\n            },\n            props.theme\n          )\n        ),\n        useDark,\n      };\n    }\n    return null;\n  }\n\n  updateTheme = (updates: RecursivePartial<FullTheme>) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme: RecursivePartial<FullTheme>) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    const { theme } = this.state;\n\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        <>\n          {this.props.children}\n          <Modal theme={theme} {...theme.Modal} />\n          <Toast theme={theme} {...theme.Toast} />\n          <CommonLoading theme={theme} {...theme.CommonLoading} />\n        </>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\ntype ThemeProviderProps = {\n  useDark?: boolean;\n  safeArea?: boolean;\n  children?: React.ReactNode;\n};\n\nconst ThemeProvider: RneFunctionComponent<ThemeProviderProps> = ({\n  safeArea,\n  ...props\n}) => {\n  if (safeArea) {\n    return (\n      <SafeAreaProvider>\n        <SafeAreaInsetsContext.Consumer>\n          {(insets: SafeAreaSize) => <ThemeInner insets={insets} {...props} />}\n        </SafeAreaInsetsContext.Consumer>\n      </SafeAreaProvider>\n    );\n  }\n  return <ThemeProvider {...props} />;\n};\n\nexport default ThemeProvider;\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]}